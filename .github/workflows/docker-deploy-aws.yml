name: Deploy Spring Boot to EC2 (via Docker Hub)

on:
  workflow_dispatch: # Allow manual triggering of the workflow
  push:
    branches:
      - develop # Default branch (can be overridden)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }} # Use input or default

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Build and push Docker image
        id: docker-build-push
        run: |
          # Login to Docker Hub
          docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

          # Build the image and tag it with the Git commit SHA
          docker build -t ${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} .

          # Push the image to Docker Hub
          docker push ${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }}

          # Set an output for the image tag (for use in later steps)
          echo "::set-output name=image_tag::${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }}"

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Deploying image ${{ needs.build-and-push.outputs.image_tag }} to EC2..."

            # Log in to Docker Hub on the EC2 instance
            docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

            # Pull the image
            docker pull ${{ needs.build-and-push.outputs.image_tag }}

            # Stop and remove the old container (if running) - Adjust as needed!
            docker stop makani-helpdesk-api || true # Ignore errors if it's not running
            docker rm makani-helpdesk-api || true

            # Run the new container (adjust the command and ports as necessary)
            docker run -d --name makani-helpdesk-api -p 8080:8080 ${{ needs.build-and-push.outputs.image_tag }}

            echo "Deployment complete."