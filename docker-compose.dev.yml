services:
  makani-helpdesk-api:
    image: elatusdevops/makani-helpdesk-api:dev
    build:
      context: .
      dockerfile: Dockerfile
    container_name: makani-helpdesk-api
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./application/src/main/resources:/app/src/main/resources
    command: >
      /bin/bash -c "
      echo '--- Starting Spring Boot application ---';
      # 4. Start the application with JVM arguments for SSL/TLS
      java -Dserver.port=8443 \
      -Dserver.ssl.enabled=true \
      -Dserver.ssl.key-store=/app/keystore.p12 \
      -Dserver.ssl.key-store-type=PKCS12 \
      -Dserver.ssl.key-store-password=$KEYSTORE_PASS \
      -Dserver.ssl.key-alias=$KEY_ALIAS \
      -Dserver.ssl.key-password=$KEYSTORE_PASS \
      -Djavax.net.ssl.trustStore=/app/truststore.p12 \
      -Djavax.net.ssl.trustStorePassword=$KEYSTORE_PASS \
      -jar /app.jar
      "
  makani-mariadb:
    image: mariadb:latest
    container_name: makani-mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: makani_db
      MYSQL_USER: dev
      MYSQL_PASSWORD: 12345
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./db_init:/docker-entrypoint-initdb.d
    command: >
      --general-log=1
      --general-log-file=/var/lib/mysql/mariadb-general.log
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/mariadb-slow.log
      --long-query-time=2

  redis:
    image: redis:6-alpine
    container_name: makani-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  makani-ca:
    image: alpine:3.18
    container_name: makani-ca
    ports:
      - "8081:8081"
    build:
      context: .
      dockerfile: ./ca-service/Dockerfile
    env_file:
      - .env
    volumes:
      - ca_certs:/certs # Persist the CA's files
    command: >
      /bin/bash -c "
      # Ensure KEYSTORE_PASS is at least 6 characters.

      if [ ! -f /certs/ca.crt ]; then
          echo '--- Generating self-signed root CA certificate and key ---';
          openssl req -x509 -sha256 -nodes -days 3650 -newkey rsa:2048 -subj '/CN=Makani CA/O=ElatusDev/OU=Makani/L=GDL/ST=JALISCO/C=MX' -keyout /certs/ca.key -out /certs/ca.crt;
      fi
      
      echo '--- Generating application key pair and truststore ---';
      keytool -genkeypair -alias $KEY_ALIAS -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore /certs/keystore.p12 -storepass $KEYSTORE_PASS -keypass $KEYSTORE_PASS -dname 'CN=makani-api, OU=Makani, O=ElatusDev, L=GDL, ST=JALISCO, C=MX' -validity 3650;
      keytool -importcert -trustcacerts -keystore /certs/truststore.p12 -storetype PKCS12 -storepass $KEYSTORE_PASS -noprompt -alias makani-ca -file /certs/ca.crt;

      echo '--- Starting Spring Boot CA application ---';
      java -Dserver.port=8081 -Dserver.ssl.enabled=true -Dserver.ssl.key-store=/certs/keystore.p12 -Dserver.ssl.key-store-type=PKCS12 -Dserver.ssl.key-store-password=$KEYSTORE_PASS -Dserver.ssl.key-alias=$KEY_ALIAS -Dserver.ssl.key-password=$KEYSTORE_PASS -Djavax.net.ssl.trustStore=/certs/truststore.p12 -Djavax.net.ssl.trustStorePassword=$KEYSTORE_PASS -jar /app/ca-service.jar
      "
volumes:
  db_data: {}
  redis_data: {}
  ca_certs: {}